<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 initialize="gemView_initializeHandler(event)"
		 creationComplete="gemView_creationCompleteHandler(event)">


	<fx:Declarations>
		<s:State name="warlock" />
		<s:State name="rogue" />
		<s:State name="mage" />
		<s:State name="priest" />
		<s:State name="warrior" />
		<s:State name="paladin" />
		<s:State name="dk" />
		<s:State name="druid" />
		<s:State name="hunter" />
		<s:State name="shaman" />
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.wowzolo.constant.GemConstant;
			import com.wowzolo.valueObjects.Gem;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.List;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var klass:String;
			
			[Bindable]
			private var orientType:ArrayCollection = new ArrayCollection(["PVP", "PVE"]);
			
			[Bindable]
			private var roleList:ArrayCollection  = new ArrayCollection();
			
			[Bindable]
			private var gemColor:ArrayList = GemConstant.GEM_COLOR_LIST;
			
			private var gemList:Gem = new Gem();
			
			[Bindable]
			private var preferGemList:ArrayCollection = gemList.gemPreferList;
			
			[Bindable]
			private var otherGemList:ArrayCollection = gemList.gemOtherList;
			
			private var selectedGemColor:String;
			private var checkedAttrFilter:Array = new Array();

			/**********************************************/
			/** 				function				  */
			/**********************************************/
			
			protected function gemView_initializeHandler(event:FlexEvent):void
			{
				switch (klass) {
					
					case "warrior":
					case "paladin":
					case "druid":
					case "dk":
						roleList.addItem("Tank");
					case "priest":
					case "shaman":
					case "paladin":
					case "druid":
						roleList.addItem("Healer");
					default:
						roleList.addItemAt("DPS", 0);
				}
			}
			
			protected function gemView_creationCompleteHandler(event:FlexEvent):void
			{
				this.currentState = klass;
			}

			private function unlikeLabelFunction(item:Object, column:DataGridColumn):String{
				return "-";
			}
			
			private function addLikeLabel(item:Object, column:DataGridColumn):String{
				return "+";
			}
			
			protected function prefer_itemClickHandler(event:ListEvent):void
			{
				// click the "-" favourite icon
				if (event.columnIndex == 0) {
					otherGemList.addItem(preferGemList.getItemAt(event.rowIndex));
					preferGemList.removeItemAt(event.rowIndex);
				}
			}


			protected function other_itemClickHandler(event:ListEvent):void
			{
				// click the "-" favourite icon
				if (event.columnIndex == 0) {
					
				}
				preferGemList.addItem(otherGemList.getItemAt(event.rowIndex));
				otherGemList.removeItemAt(event.rowIndex);
			}
			
			protected function resetFilter_clickHandler(event:MouseEvent):void
			{
				filterAgi.selected = false;
				filterAp.selected = false;
				filterArp.selected = false;
				filterCri.selected = false;
				filterDefence.selected = false;
				filterExp.selected = false;
				filterHaste.selected = false;
				filterHit.selected = false;
				filterInt.selected = false;
				filterSpr.selected = false;
				filterSta.selected = false;
				filterStr.selected = false;
				
				checkedAttrFilter = [];
				preferGemList.filterFunction = filterFunction;
				preferGemList.refresh();
			}


			protected function filterGroup_clickHandler(event:MouseEvent):void
			{
				if (event.target is CheckBox == false) return;
				var checkboxId:String = event.target.id;
				// fetch the keyword from checkboxId which has the structure 'fiilterAgi', 'filterAp'
				var keyword:String = checkboxId.replace("filter", "");
				
				// checkbox is selected(checked), push them to keep
				if (event.target.selected){
					checkedAttrFilter.push(keyword);
				} else {
					// otherwise search it and kick it out
					for (var i:String in checkedAttrFilter){
						if (checkedAttrFilter[i] == keyword){
							checkedAttrFilter.splice(i, 1);
						}
					}
				}
				
				preferGemList.filterFunction = filterFunction;
				preferGemList.refresh();
			}
			
			protected function gemFilter_changeHandler(event:IndexChangeEvent):void
			{
				selectedGemColor = gemFilter.selectedItem as String;

				preferGemList.filterFunction = filterFunction;
				preferGemList.refresh();
			}
			
			private function filterFunction(item:Object):Boolean
			{
				var checkboxResult:Boolean = true;
				var gemColorResult:Boolean = true;
				// if some checkbox is selected
				if (checkedAttrFilter.length != 0){
					for (var keyword:String in checkedAttrFilter){
						// if attr(like ap, hit..) > 0
						// keyword's initial character is Capital..like 'Agi'
						if (item[checkedAttrFilter[keyword].toLowerCase()] > 0) continue;
						checkboxResult = false;
						break;
					}
				}
				
				// if one gem color is selected
				if (selectedGemColor && selectedGemColor != "All") {
					if (item.type != selectedGemColor.toLowerCase()){
						gemColorResult = false;
					}
				}
				return checkboxResult && gemColorResult;
			}




			protected function roleDropdown_changeHandler(event:IndexChangeEvent):void
			{
				var role:String = DropDownList(event.currentTarget).selectedItem;
				if (role == "Healer"){
					filterAgi.selected = false;
					filterStr.selected = false;
					filterAgi.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
					filterStr.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
				} else {
					
				}
			}


		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout verticalAlign="top" horizontalAlign="left"/>
	</s:layout>
	
	<!-- Filter Panel -->
	<s:Panel title="Filter" width="100%" height="177">

		<s:DropDownList id="roleDropdown"
						dataProvider="{roleList}"
						selectedIndex="0"  x="10" y="10"
						enabled="{roleList.length != 1}"
						change="roleDropdown_changeHandler(event)"/>
		
		<s:DropDownList dataProvider="{orientType}"
						selectedIndex="0"  x="143" y="10"/>

		<!--TODO	apply the background color based on the gem color	-->
		<s:DropDownList id="gemFilter"
						dataProvider="{gemColor}"
						selectedIndex="0"
						x="272" y="10"
						change="gemFilter_changeHandler(event)">
			<s:layout>
				<s:VerticalLayout requestedRowCount="10" />
			</s:layout>
		</s:DropDownList>
		
		<s:HGroup id="filterGroup"
				  x="10" y="39"
				  click="filterGroup_clickHandler(event)">
			<s:Label text="Attribute" height="20" verticalAlign="middle" fontWeight="bold"/>
			<s:CheckBox id="filterStr"
						name="attr" label="Str" 
						excludeFrom="rogue, warlock, hunter, druid, mage, priest"
						enabled="{roleDropdown.selectedItem != 'Healer'}"/>
			<s:CheckBox id="filterAgi"
						name="attr" label="Agi"
						excludeFrom="warlock, mage, priest, dk, paladin, warrior"
						enabled="{roleDropdown.selectedItem != 'Healer'}"/>
			<s:CheckBox id="filterInt"
						name="attr" label="Int" 
						excludeFrom="rogue, dk, warrior"/>
			<s:CheckBox id="filterSpr"
						name="attr" label="Spr"  
						excludeFrom="rogue, dk, hunter, warlock, warrior"/>
			<s:CheckBox id="filterAp"
						name="attr" label="AP"
						excludeFrom="warlock, mage, priest"/>
			<s:CheckBox id="filterSp"
						name="attr" label="SP"
						excludeFrom="dk, hunter, rogue, warrior"/>
			<s:CheckBox id="filterCri"
						name="attr" label="Cri"/>
			<s:CheckBox id="filterHit"
						name="attr" label="Hit"/>
			<s:CheckBox id="filterHaste"
						name="attr" label="Haste"/>
			<s:CheckBox id="filterExp"
						name="attr" label="Exp"
						excludeFrom="mage, priest, warlock"/>
			<s:CheckBox id="filterArp"
						name="attr" label="ArP"
						excludeFrom="mage, priest, warlock, paladin"/>
			<s:CheckBox id="filterDefence"
						name="attr" label="Defence"
						includeIn="dk, druid, paladin, warrior"
						enabled="{roleDropdown.selectedItem == 'Tank'}"/>
			<s:CheckBox id="filterDodge"
						name="attr" label="Dodge"
						includeIn="dk, druid, paladin, warrior"
						enabled="{roleDropdown.selectedItem == 'Tank'}"/>
			<s:CheckBox id="filterSta"
						name="attr" label="Sta" />
			
			<s:Button id="resetFilter"
					  label="reset"
					  click="resetFilter_clickHandler(event)" />
		</s:HGroup>
		<s:CheckBox id="jewelCraftCheckbox"
					x="1" y="86" 
					label="Are you Jewelcrafting?" 
					selected="false" />
		
	</s:Panel>
	
	<s:Panel id="preferPanel"
			 title="Recommended Gems"
			 width="100%">
		<mx:DataGrid id="prefer" dataProvider="{preferGemList}"
					 rowCount="{preferGemList.length == 0 ? 1 : preferGemList.length }"
					 itemClick="prefer_itemClickHandler(event)">
			<mx:columns>
				<mx:DataGridColumn headerText="Unlike" labelFunction="unlikeLabelFunction" />
				<mx:DataGridColumn headerText="Name" dataField="name" />
				<mx:DataGridColumn headerText="Color" dataField="type" />
				<mx:DataGridColumn headerText="Agility" dataField="agi" />
				<mx:DataGridColumn headerText="Hit" dataField="hit" />
				<mx:DataGridColumn headerText="Stamina" dataField="sta" />
				<mx:DataGridColumn headerText="Attack Power" dataField="ap" />
				<mx:DataGridColumn headerText="Reagent" dataField="reagent" />
			</mx:columns>
			
		</mx:DataGrid>
		
	</s:Panel>
	
	<s:Panel id="otherPanel"
			 title="Other Gems"
			 width="100%">
		
		<mx:DataGrid id="other" dataProvider="{otherGemList}"
					 rowCount="{otherGemList.length}"
					 itemClick="other_itemClickHandler(event)">
			<mx:columns>
				<mx:DataGridColumn headerText="Like"  labelFunction="addLikeLabel"/>
				<mx:DataGridColumn headerText="Name" dataField="name" />
				<mx:DataGridColumn headerText="Color" dataField="type" />
				<mx:DataGridColumn headerText="Agility" dataField="agi" />
				<mx:DataGridColumn headerText="Hit" dataField="hit" />
				<mx:DataGridColumn headerText="Stamina" dataField="sta" />
				<mx:DataGridColumn headerText="Attack Power" dataField="ap" />
				<mx:DataGridColumn headerText="Reagent" dataField="reagent" />
			</mx:columns>
		</mx:DataGrid>
	</s:Panel>
	
</s:Group>
